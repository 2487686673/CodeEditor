// DO NOT EDIT
// Generated by JFlex 1.8.0-SNAPSHOT http://jflex.de/
// source: JavaLexer.jflex

package com.myopicmobile.textwarrior.common;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class JavaLexer implements JavaTokenTypes {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int BLOCK_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
          0, 0, 1, 1, 2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\31\1\24\2\0\1\24\16\30\4\0\1\31\1\65\1\26"+
    "\1\0\1\27\1\71\1\66\1\25\1\73\1\74\1\60\1\61\1\104"+
    "\1\13\1\11\1\57\1\3\1\10\6\6\2\1\1\103\1\101\1\63"+
    "\1\62\1\64\1\102\1\105\1\5\1\7\1\5\1\16\1\12\1\15"+
    "\5\27\1\56\3\27\1\14\7\27\1\4\2\27\1\77\1\23\1\100"+
    "\1\70\1\2\1\0\1\32\1\20\1\36\1\46\1\37\1\21\1\51"+
    "\1\44\1\45\1\27\1\42\1\41\1\47\1\17\1\40\1\52\1\27"+
    "\1\35\1\33\1\34\1\22\1\53\1\54\1\50\1\43\1\55\1\75"+
    "\1\67\1\76\1\72\41\30\2\0\4\27\4\0\1\27\2\0\1\30"+
    "\7\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27\1\0\u01ca\27"+
    "\4\0\14\27\16\0\5\27\7\0\1\27\1\0\1\27\21\0\160\30"+
    "\5\27\1\0\2\27\2\0\4\27\1\0\1\27\6\0\1\27\1\0"+
    "\3\27\1\0\1\27\1\0\24\27\1\0\123\27\1\0\213\27\1\0"+
    "\5\30\2\0\246\27\1\0\46\27\2\0\1\27\7\0\47\27\7\0"+
    "\1\27\1\0\55\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0"+
    "\1\30\10\0\33\27\5\0\3\27\15\0\6\30\5\0\1\27\4\0"+
    "\13\30\1\0\1\30\3\0\53\27\37\30\4\0\2\27\1\30\143\27"+
    "\1\0\1\27\10\30\1\0\6\30\2\27\2\30\1\0\4\30\2\27"+
    "\12\30\3\27\2\0\1\27\17\0\1\30\1\27\1\30\36\27\33\30"+
    "\2\0\131\27\13\30\1\27\16\0\12\30\41\27\11\30\2\27\4\0"+
    "\1\27\5\0\26\27\4\30\1\27\11\30\1\27\3\30\1\27\5\30"+
    "\22\0\31\27\3\30\4\0\13\27\65\0\25\27\1\0\10\27\26\0"+
    "\60\30\66\27\3\30\1\27\22\30\1\27\7\30\12\27\2\30\2\0"+
    "\12\30\1\0\20\27\3\30\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\1\27\3\0\4\27\2\0\1\30\1\27\7\30"+
    "\2\0\2\30\2\0\3\30\1\27\10\0\1\30\4\0\2\27\1\0"+
    "\3\27\2\30\2\0\12\30\4\27\7\0\2\27\4\0\3\30\1\0"+
    "\6\27\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\27\1\0\2\27\2\0\1\30\1\0\5\30\4\0\2\30\2\0"+
    "\3\30\3\0\1\30\7\0\4\27\1\0\1\27\7\0\14\30\3\27"+
    "\1\30\13\0\3\30\1\0\11\27\1\0\3\27\1\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27\10\30\1\0"+
    "\3\30\1\0\3\30\2\0\1\27\17\0\2\27\2\30\2\0\12\30"+
    "\1\0\1\27\7\0\1\27\6\30\1\0\3\30\1\0\10\27\2\0"+
    "\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0"+
    "\1\30\1\27\7\30\2\0\2\30\2\0\3\30\10\0\2\30\4\0"+
    "\2\27\1\0\3\27\2\30\2\0\12\30\1\0\1\27\20\0\1\30"+
    "\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0"+
    "\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0\14\27\4\0"+
    "\5\30\3\0\3\30\1\0\4\30\2\0\1\27\6\0\1\30\16\0"+
    "\12\30\11\0\1\27\6\0\4\30\1\0\10\27\1\0\3\27\1\0"+
    "\27\27\1\0\20\27\3\0\1\27\7\30\1\0\3\30\1\0\4\30"+
    "\7\0\2\30\1\0\3\27\5\0\2\27\2\30\2\0\12\30\20\0"+
    "\1\27\3\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27"+
    "\1\0\5\27\2\0\1\30\1\27\7\30\1\0\3\30\1\0\4\30"+
    "\7\0\2\30\7\0\1\27\1\0\2\27\2\30\2\0\12\30\1\0"+
    "\2\27\15\0\4\30\1\0\10\27\1\0\3\27\1\0\51\27\2\30"+
    "\1\27\7\30\1\0\3\30\1\0\4\30\1\27\5\0\3\27\1\30"+
    "\7\0\3\27\2\30\2\0\12\30\12\0\6\27\2\0\2\30\1\0"+
    "\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0\7\27\3\0"+
    "\1\30\4\0\6\30\1\0\1\30\1\0\10\30\6\0\12\30\2\0"+
    "\2\30\15\0\60\27\1\30\2\27\7\30\4\0\10\27\10\30\1\0"+
    "\12\30\47\0\2\27\1\0\1\27\2\0\2\27\1\0\1\27\2\0"+
    "\1\27\6\0\4\27\1\0\7\27\1\0\3\27\1\0\1\27\1\0"+
    "\1\27\2\0\2\27\1\0\4\27\1\30\2\27\6\30\1\0\2\30"+
    "\1\27\2\0\5\27\1\0\1\27\1\0\6\30\2\0\12\30\2\0"+
    "\4\27\40\0\1\27\27\0\2\30\6\0\12\30\13\0\1\30\1\0"+
    "\1\30\1\0\1\30\4\0\2\30\10\27\1\0\44\27\4\0\24\30"+
    "\1\0\2\30\5\27\13\30\1\0\44\30\11\0\1\30\71\0\53\27"+
    "\24\30\1\27\12\30\6\0\6\27\4\30\4\27\3\30\1\27\3\30"+
    "\2\27\7\30\3\27\4\30\15\27\14\30\1\27\17\30\2\0\46\27"+
    "\1\0\1\27\5\0\1\27\2\0\53\27\1\0\u014d\27\1\0\4\27"+
    "\2\0\7\27\1\0\1\27\1\0\4\27\2\0\51\27\1\0\4\27"+
    "\2\0\41\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\17\27\1\0\71\27\1\0\4\27\2\0\103\27\2\0\3\30"+
    "\40\0\20\27\20\0\126\27\2\0\6\27\3\0\u026c\27\2\0\21\27"+
    "\1\0\32\27\5\0\113\27\3\0\13\27\7\0\15\27\1\0\4\27"+
    "\3\30\13\0\22\27\3\30\13\0\22\27\2\30\14\0\15\27\1\0"+
    "\3\27\1\0\2\30\14\0\64\27\40\30\3\0\1\27\3\0\2\27"+
    "\1\30\2\0\12\30\41\0\4\30\1\0\12\30\6\0\130\27\10\0"+
    "\5\27\2\30\42\27\1\30\1\27\5\0\106\27\12\0\37\27\1\0"+
    "\14\30\4\0\14\30\12\0\12\30\36\27\2\0\5\27\13\0\54\27"+
    "\4\0\32\27\6\0\12\30\46\0\27\27\5\30\4\0\65\27\12\30"+
    "\1\0\35\30\2\0\13\30\6\0\12\30\15\0\1\27\10\0\16\30"+
    "\102\0\5\30\57\27\21\30\7\27\4\0\12\30\21\0\11\30\14\0"+
    "\3\30\36\27\15\30\2\27\12\30\54\27\16\30\14\0\44\27\24\30"+
    "\10\0\12\30\3\0\3\27\12\30\44\27\2\0\11\27\107\0\3\30"+
    "\1\0\25\30\4\27\1\30\4\27\3\30\2\27\3\30\6\0\300\27"+
    "\72\30\1\0\5\30\u0116\27\2\0\6\27\2\0\46\27\2\0\6\27"+
    "\2\0\10\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27"+
    "\2\0\65\27\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27"+
    "\3\0\4\27\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27"+
    "\16\0\5\30\32\0\5\30\20\0\2\27\23\0\1\27\13\0\5\30"+
    "\1\0\12\30\1\0\1\27\15\0\1\27\20\0\15\27\3\0\40\27"+
    "\20\0\15\30\4\0\1\30\3\0\14\30\21\0\1\27\4\0\1\27"+
    "\2\0\12\27\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\1\0\13\27\2\0\4\27\5\0\5\27"+
    "\4\0\1\27\21\0\51\27\u0a77\0\57\27\1\0\57\27\1\0\205\27"+
    "\6\0\4\27\3\30\2\27\14\0\46\27\1\0\1\27\5\0\1\27"+
    "\2\0\70\27\7\0\1\27\17\0\1\30\27\27\11\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\40\30\57\0\1\27\u01d5\0\3\27\31\0"+
    "\11\27\6\30\1\0\5\27\2\0\5\27\4\0\126\27\2\0\2\30"+
    "\2\0\3\27\1\0\132\27\1\0\4\27\5\0\52\27\2\0\136\27"+
    "\21\0\33\27\65\0\20\27\u0200\0\u19b6\27\112\0\u51eb\27\25\0\u048d\27"+
    "\103\0\56\27\2\0\u010d\27\3\0\20\27\12\30\2\27\24\0\57\27"+
    "\1\30\4\0\12\30\1\0\37\27\2\30\120\27\2\30\45\0\11\27"+
    "\2\0\147\27\2\0\44\27\1\0\10\27\77\0\13\27\1\30\3\27"+
    "\1\30\4\27\1\30\27\27\5\30\20\0\1\27\7\0\64\27\14\0"+
    "\2\30\62\27\22\30\12\0\12\30\6\0\22\30\6\27\3\0\1\27"+
    "\1\0\1\27\2\0\12\30\34\27\10\30\2\0\27\27\15\30\14\0"+
    "\35\27\3\0\4\30\57\27\16\30\16\0\1\27\12\30\6\0\5\27"+
    "\1\30\12\27\12\30\5\27\1\0\51\27\16\30\11\0\3\27\1\30"+
    "\10\27\2\30\2\0\12\30\6\0\27\27\3\0\1\27\3\30\62\27"+
    "\1\30\1\27\3\30\2\27\2\30\5\27\2\30\1\27\1\30\1\27"+
    "\30\0\3\27\2\0\13\27\5\30\2\0\3\27\2\30\12\0\6\27"+
    "\2\0\6\27\2\0\6\27\11\0\7\27\1\0\7\27\1\0\53\27"+
    "\1\0\12\27\12\0\163\27\10\30\1\0\2\30\2\0\12\30\6\0"+
    "\u2ba4\27\14\0\27\27\4\0\61\27\u2104\0\u016e\27\2\0\152\27\46\0"+
    "\7\27\14\0\5\27\5\0\1\27\1\30\12\27\1\0\15\27\1\0"+
    "\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27\3\0\20\30\20\0"+
    "\20\30\3\0\2\27\30\0\3\27\31\0\1\27\6\0\5\27\1\0"+
    "\207\27\2\0\1\30\4\0\1\27\13\0\12\30\7\0\32\27\4\0"+
    "\1\27\1\0\32\27\13\0\131\27\3\0\6\27\2\0\6\27\2\0"+
    "\6\27\2\0\3\27\3\0\2\27\3\0\2\27\22\0\3\30\4\0"+
    "\14\27\1\0\32\27\1\0\23\27\1\0\2\27\1\0\17\27\2\0"+
    "\16\27\42\0\173\27\105\0\65\27\210\0\1\30\202\0\35\27\3\0"+
    "\61\27\17\0\1\30\37\0\40\27\15\0\36\27\5\0\46\27\5\30"+
    "\5\0\36\27\2\0\44\27\4\0\10\27\1\0\5\27\52\0\236\27"+
    "\2\0\12\30\6\0\44\27\4\0\44\27\4\0\50\27\10\0\64\27"+
    "\234\0\u0137\27\11\0\26\27\12\0\10\27\230\0\6\27\2\0\1\27"+
    "\1\0\54\27\1\0\2\27\3\0\1\27\2\0\27\27\12\0\27\27"+
    "\11\0\37\27\101\0\23\27\1\0\2\27\12\0\26\27\12\0\32\27"+
    "\106\0\70\27\6\0\2\27\100\0\1\27\3\30\1\0\2\30\5\0"+
    "\4\30\4\27\1\0\3\27\1\0\33\27\4\0\3\30\4\0\1\30"+
    "\40\0\35\27\3\0\35\27\43\0\10\27\1\0\34\27\2\30\31\0"+
    "\66\27\12\0\26\27\12\0\23\27\15\0\22\27\156\0\111\27\67\0"+
    "\63\27\15\0\63\27\u030d\0\3\30\65\27\17\30\37\0\12\30\17\0"+
    "\4\30\55\27\13\30\2\0\1\30\22\0\31\27\7\0\12\30\6\0"+
    "\3\30\44\27\16\30\1\0\12\30\20\0\43\27\1\30\2\0\1\27"+
    "\11\0\3\30\60\27\16\30\4\27\5\0\3\30\3\0\12\30\1\27"+
    "\1\0\1\27\43\0\22\27\1\0\31\27\14\30\6\0\1\30\101\0"+
    "\7\27\1\0\1\27\1\0\4\27\1\0\17\27\1\0\12\27\7\0"+
    "\57\27\14\30\5\0\12\30\6\0\4\30\1\0\10\27\2\0\2\27"+
    "\2\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30"+
    "\1\27\7\30\2\0\2\30\2\0\3\30\2\0\1\27\6\0\1\30"+
    "\5\0\5\27\2\30\2\0\7\30\3\0\5\30\213\0\65\27\22\30"+
    "\4\27\5\0\12\30\46\0\60\27\24\30\2\27\1\0\1\27\10\0"+
    "\12\30\246\0\57\27\7\30\2\0\11\30\27\0\4\27\2\30\42\0"+
    "\60\27\21\30\3\0\1\27\13\0\12\30\46\0\53\27\15\30\10\0"+
    "\12\30\66\0\32\27\3\0\17\30\4\0\12\30\u0166\0\100\27\12\30"+
    "\25\0\1\27\u0100\0\1\27\12\30\50\27\7\30\1\27\4\30\10\0"+
    "\1\30\10\0\1\27\13\30\50\27\2\0\4\27\20\30\46\0\71\27"+
    "\u0107\0\11\27\1\0\45\27\10\30\1\0\10\30\1\27\17\0\12\30"+
    "\30\0\36\27\2\0\26\30\1\0\16\30\111\0\7\27\1\0\2\27"+
    "\1\0\46\27\6\30\3\0\1\30\1\0\2\30\1\0\7\30\1\27"+
    "\1\30\10\0\12\30\u02a6\0\u039a\27\146\0\157\27\21\0\304\27\u0abc\0"+
    "\u042f\27\u0fd1\0\u0247\27\u21b9\0\u0239\27\7\0\37\27\1\0\12\30\146\0"+
    "\36\27\2\0\5\30\13\0\60\27\7\30\11\0\4\27\14\0\12\30"+
    "\11\0\25\27\5\0\23\27\u0370\0\105\27\13\0\1\27\56\30\20\0"+
    "\4\30\15\27\100\0\2\27\36\0\u17ed\27\23\0\u02f3\27\u250d\0\u011f\27"+
    "\121\0\u018c\27\u0904\0\153\27\5\0\15\27\3\0\11\27\7\0\12\27"+
    "\3\0\2\30\1\0\4\30\u14c1\0\5\30\3\0\26\30\2\0\7\30"+
    "\36\0\4\30\224\0\3\30\u01bb\0\125\27\1\0\107\27\1\0\2\27"+
    "\2\0\1\27\2\0\2\27\2\0\4\27\1\0\14\27\1\0\1\27"+
    "\1\0\7\27\1\0\101\27\1\0\4\27\2\0\10\27\1\0\7\27"+
    "\1\0\34\27\1\0\4\27\1\0\5\27\1\0\1\27\3\0\7\27"+
    "\1\0\u0154\27\2\0\31\27\1\0\31\27\1\0\37\27\1\0\31\27"+
    "\1\0\37\27\1\0\31\27\1\0\37\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\10\27\2\0\62\30\u0200\0\67\30\4\0\62\30"+
    "\10\0\1\30\16\0\1\30\26\0\5\30\1\0\17\30\u0550\0\7\30"+
    "\1\0\21\30\2\0\7\30\1\0\2\30\1\0\5\30\u07d5\0\305\27"+
    "\13\0\7\30\51\0\104\27\7\30\5\0\12\30\u04a6\0\4\27\1\0"+
    "\33\27\1\0\2\27\1\0\1\27\2\0\1\27\1\0\12\27\1\0"+
    "\4\27\1\0\1\27\1\0\1\27\6\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0\1\27\2\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\2\27\1\0\1\27\2\0\4\27\1\0\7\27\1\0\4\27\1\0"+
    "\4\27\1\0\1\27\1\0\12\27\1\0\21\27\5\0\3\27\1\0"+
    "\5\27\1\0\21\27\u1144\0\ua6d7\27\51\0\u1035\27\13\0\336\27\2\0"+
    "\u1682\27\16\0\u1d31\27\u0c1f\0\u021e\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\30\36\0\140\30\200\0\360\30\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\2\1\4\1\5\3\3"+
    "\1\6\1\1\1\7\15\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\1\1\40\1\41\2\42"+
    "\1\0\1\43\1\0\1\44\1\43\1\45\1\0\1\2"+
    "\1\0\1\2\1\0\1\43\1\0\1\46\1\47\1\50"+
    "\12\3\2\0\23\3\1\51\2\3\1\52\6\3\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\0\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\2\0\1\75\2\43\3\0\1\2\2\0"+
    "\1\2\1\0\1\76\2\3\1\77\4\3\1\100\2\3"+
    "\1\101\1\0\12\3\1\102\15\3\1\103\13\3\1\104"+
    "\1\105\3\0\1\2\4\0\1\106\3\3\1\107\3\3"+
    "\1\0\10\3\1\110\2\3\1\111\1\3\1\112\4\3"+
    "\1\113\1\114\1\115\1\3\1\116\6\3\1\117\5\3"+
    "\1\120\1\3\1\121\1\0\1\2\1\43\1\0\1\3"+
    "\1\122\1\3\1\123\1\124\1\125\1\0\2\3\1\126"+
    "\3\3\1\127\2\3\1\130\1\3\1\131\1\132\1\3"+
    "\1\133\14\3\1\134\1\0\1\135\2\3\1\0\1\3"+
    "\1\136\1\137\2\3\1\140\1\3\1\141\1\142\4\3"+
    "\1\143\2\3\1\144\1\145\4\3\1\146\1\147\5\3"+
    "\1\150\3\3\1\151\1\152\1\3\1\153\1\3\1\154"+
    "\1\155\2\3\1\156\4\3\1\157\1\3\1\160\1\3"+
    "\1\161\1\3\1\162\1\3\1\163\1\164\1\3\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\322\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\322"+
    "\0\u0a64\0\322\0\322\0\u0aaa\0\u0af0\0\322\0\322\0\322"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\322\0\322\0\322\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\322\0\322"+
    "\0\322\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u015e\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\322\0\322\0\322\0\322\0\322"+
    "\0\322\0\322\0\u196e\0\322\0\u19b4\0\322\0\322\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\u0af0\0\u19fa\0\322"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\322\0\u1cfc\0\u1d42\0\u015e\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u015e\0\u1ea0\0\u1ee6\0\322\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u015e\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\322\0\322\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u015e\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u015e\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u015e\0\u2f4e"+
    "\0\u2f94\0\u015e\0\u2fda\0\u015e\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u015e\0\u015e\0\u015e\0\u3138\0\u015e\0\u317e\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u015e\0\u3322\0\u3368\0\u33ae\0\u33f4"+
    "\0\u343a\0\u015e\0\u3480\0\322\0\u34c6\0\u350c\0\u3552\0\u3598"+
    "\0\u35de\0\u015e\0\u3624\0\u015e\0\u015e\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u015e\0\u3782\0\u37c8\0\u380e\0\u015e\0\u3854\0\u389a"+
    "\0\u38e0\0\u3926\0\u015e\0\u015e\0\u396c\0\u015e\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28"+
    "\0\u3c6e\0\u3cb4\0\u015e\0\u3cfa\0\u015e\0\u3d40\0\u3d86\0\u3dcc"+
    "\0\u3e12\0\u015e\0\u015e\0\u3e58\0\u3e9e\0\u015e\0\u3ee4\0\u015e"+
    "\0\u015e\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u015e\0\u4042\0\u4088"+
    "\0\u015e\0\u015e\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u015e\0\u015e"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u015e\0\u4344\0\u438a"+
    "\0\u43d0\0\u015e\0\u015e\0\u4416\0\u015e\0\u445c\0\u015e\0\u015e"+
    "\0\u44a2\0\u44e8\0\u015e\0\u452e\0\u4574\0\u45ba\0\u4600\0\u015e"+
    "\0\u4646\0\u015e\0\u468c\0\u015e\0\u46d2\0\u015e\0\u4718\0\u015e"+
    "\0\u015e\0\u475e\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\6\1\5\1\6\1\5"+
    "\1\10\1\6\1\11\3\6\1\12\1\13\1\14\1\6"+
    "\1\4\1\15\1\16\1\17\1\6\1\4\1\15\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\6\1\26\3\6"+
    "\1\27\1\30\2\6\1\31\1\32\1\33\1\34\2\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\23\64"+
    "\1\65\1\66\1\64\1\67\57\64\60\70\1\71\25\70"+
    "\107\0\1\5\1\72\1\5\2\0\1\5\1\0\1\5"+
    "\1\73\1\74\2\0\1\75\1\76\2\0\1\75\15\0"+
    "\1\74\1\0\1\77\4\0\1\76\7\0\1\77\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\25\6\30\0\1\100\1\0\1\101\1\102\1\0\1\103"+
    "\1\104\1\103\1\73\1\74\2\0\1\75\1\76\1\0"+
    "\1\104\1\75\15\0\1\74\1\0\1\77\4\0\1\76"+
    "\1\0\1\102\5\0\1\77\30\0\1\105\1\0\1\73"+
    "\2\0\1\105\1\0\1\105\1\106\107\0\1\107\46\0"+
    "\1\110\1\0\1\111\22\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\112\4\0\2\6\1\0\1\113\4\6\1\114"+
    "\17\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\3\6\1\115\2\6\1\116\2\6\1\117"+
    "\13\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\1\120\5\6\1\121\1\122\3\6\1\123"+
    "\11\6\53\0\1\15\4\0\1\15\54\0\23\124\1\125"+
    "\2\0\60\124\1\0\10\6\1\0\1\6\1\0\4\6"+
    "\1\126\2\6\4\0\2\6\1\0\1\6\1\127\23\6"+
    "\30\0\10\6\1\0\1\6\1\0\6\6\1\130\4\0"+
    "\2\6\1\0\2\6\1\131\6\6\1\132\1\133\7\6"+
    "\1\134\2\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\3\6\1\135\6\6\1\136\12\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\137\17\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\1\140\5\6\1\141"+
    "\1\142\2\6\1\143\12\6\30\0\10\6\1\0\1\6"+
    "\1\0\3\6\1\144\3\6\4\0\2\6\1\0\7\6"+
    "\1\145\6\6\1\146\6\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\6\6\1\147\16\6"+
    "\30\0\10\6\1\0\1\6\1\0\3\6\1\150\1\6"+
    "\1\151\1\6\4\0\2\6\1\0\15\6\1\152\7\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\153\1\154\16\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\6\6\1\155"+
    "\16\6\30\0\10\6\1\0\1\6\1\0\6\6\1\156"+
    "\4\0\2\6\1\0\1\157\2\6\1\160\21\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\6\6\1\161\16\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\12\6\1\162\12\6\106\0"+
    "\1\163\1\164\1\0\1\165\105\0\1\166\104\0\1\167"+
    "\1\170\105\0\1\171\105\0\1\172\1\173\104\0\1\174"+
    "\1\0\1\175\103\0\1\176\105\0\1\177\3\0\1\200"+
    "\101\0\1\201\4\0\1\202\100\0\1\203\105\0\1\204"+
    "\126\0\1\205\2\0\23\64\1\206\1\0\1\64\1\0"+
    "\57\64\17\0\3\64\1\207\1\64\1\0\2\64\5\0"+
    "\2\64\127\0\1\210\27\0\1\5\1\72\1\5\2\0"+
    "\1\5\1\0\1\5\76\0\1\105\1\0\1\73\2\0"+
    "\1\105\1\0\1\105\1\0\1\74\2\0\1\75\1\76"+
    "\2\0\1\75\15\0\1\74\6\0\1\76\40\0\1\211"+
    "\1\0\1\212\2\0\1\211\1\0\1\211\2\0\1\213"+
    "\45\0\1\213\25\0\1\100\1\214\1\100\2\0\1\100"+
    "\1\0\1\100\1\73\1\74\2\0\1\75\1\76\2\0"+
    "\1\75\15\0\1\74\6\0\1\76\40\0\1\100\1\215"+
    "\1\101\2\0\1\103\1\0\1\103\1\73\1\74\2\0"+
    "\1\75\1\76\2\0\1\75\15\0\1\74\1\0\1\77"+
    "\4\0\1\76\7\0\1\77\30\0\1\216\1\0\1\216"+
    "\1\0\4\216\1\217\1\216\2\0\2\216\1\0\2\216"+
    "\10\0\1\216\3\0\2\216\6\0\1\216\40\0\1\100"+
    "\1\220\1\103\2\0\1\103\1\0\1\103\1\73\1\74"+
    "\2\0\1\75\1\76\2\0\1\75\15\0\1\74\1\0"+
    "\1\77\4\0\1\76\7\0\1\77\32\0\1\221\4\0"+
    "\1\221\76\0\1\105\1\222\1\105\2\0\1\105\1\0"+
    "\1\105\1\0\1\74\2\0\1\75\1\76\2\0\1\75"+
    "\15\0\1\74\6\0\1\76\50\0\1\223\75\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\7\6"+
    "\1\224\15\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\2\6\1\225\22\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\22\6"+
    "\1\226\2\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\5\6\1\227\17\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\6\6"+
    "\1\230\16\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\2\6\1\231\22\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\7\6"+
    "\1\232\15\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\3\6\1\233\21\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\6\6"+
    "\1\234\16\6\30\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\235\3\6\4\0\2\6\1\0\25\6\54\0\1\236"+
    "\77\0\3\124\1\237\1\124\1\0\2\124\5\0\2\124"+
    "\51\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\1\6\1\240\23\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\1\6\1\241\23\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\20\6\1\242\4\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\1\243\2\6\1\244"+
    "\21\6\30\0\10\6\1\0\1\6\1\0\3\6\1\245"+
    "\3\6\4\0\2\6\1\0\25\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\6\6\1\246"+
    "\16\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\13\6\1\247\11\6\30\0\10\6\1\0"+
    "\1\6\1\0\6\6\1\250\4\0\2\6\1\0\1\251"+
    "\10\6\1\252\13\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\3\6\1\253\7\6\1\254"+
    "\11\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\2\6\1\255\22\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\1\6\1\256"+
    "\1\257\22\6\30\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\260\3\6\4\0\2\6\1\0\25\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\1\261"+
    "\24\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\1\262\24\6\30\0\10\6\1\0\1\6"+
    "\1\0\6\6\1\263\4\0\2\6\1\0\25\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\6\1\264\23\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\2\6\1\265\22\6\30\0"+
    "\10\6\1\0\1\6\1\0\3\6\1\266\3\6\4\0"+
    "\2\6\1\0\25\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\1\6\1\267\1\270\22\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\20\6\1\271\4\6\30\0\10\6\1\0\1\6"+
    "\1\0\5\6\1\272\1\6\4\0\2\6\1\0\25\6"+
    "\30\0\10\6\1\0\1\6\1\0\6\6\1\273\4\0"+
    "\2\6\1\0\25\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\2\6\1\274\22\6\30\0"+
    "\10\6\1\0\1\6\1\0\4\6\1\275\2\6\4\0"+
    "\2\6\1\0\25\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\4\6\1\276\20\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\6\6\1\277\4\6\1\300\11\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\7\6\1\301"+
    "\3\6\1\302\11\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\13\6\1\303\11\6\27\0"+
    "\24\163\1\0\61\163\62\0\1\304\105\0\1\305\1\0"+
    "\1\306\22\0\1\307\1\0\1\307\1\0\4\307\1\0"+
    "\1\307\2\0\2\307\1\0\2\307\10\0\1\307\3\0"+
    "\2\307\6\0\1\307\40\0\1\211\1\310\1\211\2\0"+
    "\1\211\1\0\1\211\4\0\1\75\1\76\2\0\1\75"+
    "\24\0\1\76\40\0\1\211\1\0\1\212\2\0\1\211"+
    "\1\0\1\211\4\0\1\75\1\76\2\0\1\75\24\0"+
    "\1\76\40\0\1\211\1\0\1\212\2\0\1\211\1\0"+
    "\1\211\76\0\1\100\1\214\1\100\2\0\1\100\1\0"+
    "\1\100\77\0\1\215\1\311\2\0\1\311\1\0\1\311"+
    "\76\0\1\216\1\312\1\216\1\0\4\216\1\313\1\216"+
    "\1\0\1\314\2\216\1\0\2\216\10\0\1\216\3\0"+
    "\2\216\1\0\1\77\4\0\1\216\3\0\1\314\3\0"+
    "\1\77\30\0\1\313\1\0\1\313\1\0\4\313\1\0"+
    "\1\313\2\0\2\313\1\0\2\313\10\0\1\313\3\0"+
    "\2\313\6\0\1\313\40\0\1\100\1\220\1\103\2\0"+
    "\1\103\1\0\1\103\77\0\1\315\1\221\4\0\1\221"+
    "\30\0\1\77\14\0\1\77\30\0\1\105\1\222\1\105"+
    "\2\0\1\105\1\0\1\105\76\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\7\6\1\316\15\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\13\6\1\317\11\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\1\320\24\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\7\6\1\321\15\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\5\6\1\322\17\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\6\1\323\23\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\1\324\24\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\1\325"+
    "\24\6\30\0\1\326\1\0\1\326\1\0\4\326\1\0"+
    "\1\326\2\0\2\326\1\0\2\326\10\0\1\326\3\0"+
    "\2\326\6\0\1\326\40\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\2\6\1\327\22\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\5\6\1\330\17\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\5\6\1\331\17\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\2\6\1\332\22\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\13\6\1\333\11\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\4\6\1\334\20\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\3\6\1\335\21\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\2\6\1\336\22\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\5\6\1\337\17\6\30\0"+
    "\10\6\1\0\1\6\1\0\3\6\1\340\3\6\4\0"+
    "\2\6\1\0\25\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\6\6\1\341\16\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\6\1\342\23\6\30\0\10\6\1\0\1\6\1\0"+
    "\6\6\1\343\4\0\2\6\1\0\25\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\5\6"+
    "\1\344\17\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\4\6\1\345\20\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\1\6"+
    "\1\346\1\347\22\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\1\6\1\350\23\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\3\6\1\351\21\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\15\6\1\352\7\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\5\6\1\353\17\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\5\6\1\354\17\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\17\6\1\355\5\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\2\6\1\356\22\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\5\6\1\357\17\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\6\6\1\360\1\361\15\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\1\362\24\6\30\0\10\6\1\0\1\6\1\0"+
    "\4\6\1\363\2\6\4\0\2\6\1\0\25\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\6\6\1\364\16\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\7\6\1\365\15\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\10\6\1\366\14\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\2\6\1\367\22\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\21\6\1\370\3\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\1\371\24\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\14\6"+
    "\1\372\10\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\7\6\1\373\15\6\111\0\1\374"+
    "\24\0\1\375\1\0\1\375\1\0\4\375\1\0\1\375"+
    "\2\0\2\375\1\0\2\375\10\0\1\375\3\0\2\375"+
    "\6\0\1\375\40\0\1\211\1\310\1\211\2\0\1\211"+
    "\1\0\1\211\77\0\1\215\1\311\2\0\1\311\1\0"+
    "\1\311\30\0\1\77\14\0\1\77\30\0\1\376\1\312"+
    "\1\376\1\0\4\376\1\0\1\376\2\0\2\376\1\0"+
    "\2\376\10\0\1\376\3\0\2\376\6\0\1\376\40\0"+
    "\1\313\1\0\1\313\1\0\4\313\1\0\1\313\1\0"+
    "\1\314\2\313\1\0\2\313\10\0\1\313\3\0\2\313"+
    "\6\0\1\313\3\0\1\314\34\0\1\377\1\0\1\377"+
    "\2\0\1\377\1\0\1\377\2\0\1\u0100\45\0\1\u0100"+
    "\26\0\1\315\1\221\4\0\1\221\76\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\21\6\1\u0101"+
    "\3\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\10\6\1\u0102\14\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\5\6\1\u0103"+
    "\17\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\5\6\1\u0104\17\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\2\6\1\u0105"+
    "\22\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\7\6\1\u0106\15\6\30\0\1\u0107\1\0"+
    "\1\u0107\1\0\4\u0107\1\0\1\u0107\2\0\2\u0107\1\0"+
    "\2\u0107\10\0\1\u0107\3\0\2\u0107\6\0\1\u0107\40\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\3\6\1\u0108\21\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\3\6\1\u0109\21\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\3\6\1\u010a\21\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\13\6\1\u010b\11\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\4\6\1\u010c\20\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\12\6\1\u010d\12\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\2\6\1\u010e\22\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\4\6\1\u010f\20\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\6\1\u0110\23\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\22\6\1\u0111\2\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\3\6\1\u0112\21\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\12\6\1\u0113\12\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\2\6\1\u0114\22\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\13\6\1\u0115\11\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\6\1\u0116\23\6\30\0\10\6\1\0\1\6\1\0"+
    "\3\6\1\u0117\3\6\4\0\2\6\1\0\25\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\u0118\24\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\3\6\1\u0119\21\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\3\6"+
    "\1\u011a\21\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\5\6\1\u011b\17\6\30\0\10\6"+
    "\1\0\1\6\1\0\6\6\1\u011c\4\0\2\6\1\0"+
    "\25\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\7\6\1\u011d\15\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\13\6\1\u011e"+
    "\11\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\1\u011f\24\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\5\6\1\u0120\17\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\1\u0121\24\6\30\0\10\6\1\0\1\6\1\0"+
    "\7\6\4\0\2\6\1\0\2\6\1\u0122\22\6\30\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\5\6\1\u0123\17\6\30\0\1\u0124\1\0\1\u0124\1\0"+
    "\4\u0124\1\0\1\u0124\2\0\2\u0124\1\0\2\u0124\10\0"+
    "\1\u0124\3\0\2\u0124\6\0\1\u0124\40\0\1\376\1\312"+
    "\1\376\1\0\4\376\1\0\1\376\2\0\2\376\1\0"+
    "\2\376\10\0\1\376\3\0\2\376\1\0\1\77\4\0"+
    "\1\376\7\0\1\77\30\0\1\377\1\0\1\377\2\0"+
    "\1\377\1\0\1\377\4\0\1\75\1\76\2\0\1\75"+
    "\24\0\1\76\40\0\1\377\1\0\1\377\2\0\1\377"+
    "\1\0\1\377\76\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\5\6\1\u0125\17\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\1\u0126"+
    "\24\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\7\6\1\u0127\15\6\30\0\1\u0128\1\0"+
    "\1\u0128\1\0\4\u0128\1\0\1\u0128\2\0\2\u0128\1\0"+
    "\2\u0128\10\0\1\u0128\3\0\2\u0128\6\0\1\u0128\40\0"+
    "\10\6\1\0\1\6\1\0\7\6\4\0\2\6\1\0"+
    "\1\u0129\24\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\2\6\1\u012a\22\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\4\6"+
    "\1\u012b\20\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\2\6\1\u012c\22\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\3\6"+
    "\1\u012d\21\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\12\6\1\u012e\12\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\13\6"+
    "\1\u012f\11\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\1\6\1\u0130\23\6\30\0\10\6"+
    "\1\0\1\6\1\0\3\6\1\u0131\3\6\4\0\2\6"+
    "\1\0\25\6\30\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\u0132\3\6\4\0\2\6\1\0\25\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\14\6"+
    "\1\u0133\10\6\30\0\10\6\1\0\1\6\1\0\3\6"+
    "\1\u0134\3\6\4\0\2\6\1\0\25\6\30\0\10\6"+
    "\1\0\1\6\1\0\5\6\1\u0135\1\6\4\0\2\6"+
    "\1\0\25\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\2\6\1\u0136\22\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\15\6"+
    "\1\u0137\7\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\7\6\1\u0138\15\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\5\6"+
    "\1\u0139\17\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\4\6\1\u013a\20\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\17\6"+
    "\1\u013b\5\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\4\6\1\u013c\20\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\2\6"+
    "\1\u013d\22\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\13\6\1\u013e\11\6\30\0\1\64"+
    "\1\0\1\64\1\0\4\64\1\0\1\64\2\0\2\64"+
    "\1\0\2\64\10\0\1\64\3\0\2\64\6\0\1\64"+
    "\40\0\10\6\1\0\1\6\1\0\3\6\1\u013f\3\6"+
    "\4\0\2\6\1\0\25\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\11\6\1\u0140\13\6"+
    "\30\0\1\124\1\0\1\124\1\0\4\124\1\0\1\124"+
    "\2\0\2\124\1\0\2\124\10\0\1\124\3\0\2\124"+
    "\6\0\1\124\40\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\4\6\1\u0141\20\6\30\0\10\6"+
    "\1\0\1\6\1\0\5\6\1\u0142\1\6\4\0\2\6"+
    "\1\0\25\6\30\0\10\6\1\0\1\6\1\0\7\6"+
    "\4\0\2\6\1\0\6\6\1\u0143\16\6\30\0\10\6"+
    "\1\0\1\6\1\0\7\6\4\0\2\6\1\0\5\6"+
    "\1\u0144\17\6\30\0\10\6\1\0\1\6\1\0\6\6"+
    "\1\u0145\4\0\2\6\1\0\25\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\1\6\1\u0146"+
    "\23\6\30\0\10\6\1\0\1\6\1\0\7\6\4\0"+
    "\2\6\1\0\4\6\1\u0147\20\6\30\0\10\6\1\0"+
    "\1\6\1\0\7\6\4\0\2\6\1\0\1\u0148\24\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\u0149\17\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\2\6\1\u014a\22\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\u014b\17\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\2\6\1\u014c\22\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\u014d\17\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\7\6\1\u014e\15\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\2\6\1\u014f\22\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\20\6\1\u0150\4\6"+
    "\30\0\10\6\1\0\1\6\1\0\3\6\1\u0151\3\6"+
    "\4\0\2\6\1\0\25\6\30\0\10\6\1\0\1\6"+
    "\1\0\3\6\1\u0152\3\6\4\0\2\6\1\0\25\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\u0153\17\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\5\6\1\u0154\17\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\4\6\1\u0155\20\6\30\0\10\6\1\0\1\6"+
    "\1\0\3\6\1\u0156\3\6\4\0\2\6\1\0\25\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\5\6\1\u0157\17\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\5\6\1\u0158\17\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\13\6\1\u0159\11\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\2\6\1\u015a\22\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\6\6\1\u015b\16\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\5\6\1\u015c\17\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\2\6\1\u015d\22\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\14\6\1\u015e\10\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\23\6\1\u015f\1\6\30\0\10\6\1\0\1\6"+
    "\1\0\5\6\1\u0160\1\6\4\0\2\6\1\0\25\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\1\6\1\u0161\23\6\30\0\10\6\1\0\1\6"+
    "\1\0\7\6\4\0\2\6\1\0\5\6\1\u0162\17\6"+
    "\30\0\10\6\1\0\1\6\1\0\7\6\4\0\2\6"+
    "\1\0\14\6\1\u0163\10\6\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\30\1\11\11\1\1\2\11"+
    "\2\1\3\11\1\1\1\0\1\1\1\0\3\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\11\12\1"+
    "\2\0\36\1\7\11\1\1\1\11\1\0\10\11\2\0"+
    "\1\11\2\1\3\0\1\1\2\0\1\1\1\0\1\11"+
    "\12\1\1\11\1\0\44\1\2\11\3\0\1\1\4\0"+
    "\10\1\1\0\45\1\1\11\1\0\2\1\1\0\6\1"+
    "\1\0\34\1\1\0\3\1\1\0\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters up to the start of the matched text. */
  private int yychar;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the scanner is at the end of line. */
  private boolean zzAtEOF;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public JavaLexer() {
  }

    public int getCharIndex() {
        return yychar + yylength();
    }
    public int getLine(){
        return yyline;
    }
    public int getColumn(){
        return yycolumn;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3470) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
        char[] newBuffer = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   * 
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);return TokenNameERROR;
            }  // fall though
            case 356: break;
            case BLOCK_COMMENT: {
              yybegin(YYINITIAL);return TokenNameCOMMENT_BLOCK;
            }  // fall though
            case 357: break;
            default:
          { return TokenNameEOF;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenNameERROR;
            } 
            // fall through
          case 118: break;
          case 2: 
            { return TokenNameIntegerLiteral;
            } 
            // fall through
          case 119: break;
          case 3: 
            { return TokenNameIdentifier;
            } 
            // fall through
          case 120: break;
          case 4: 
            { return TokenNameDOT;
            } 
            // fall through
          case 121: break;
          case 5: 
            { return TokenNameMINUS;
            } 
            // fall through
          case 122: break;
          case 6: 
            { return TokenNameWHITESPACE;
            } 
            // fall through
          case 123: break;
          case 7: 
            { yybegin(STRING);return TokenNameStringLiteral;
            } 
            // fall through
          case 124: break;
          case 8: 
            { return TokenNameDIVIDE;
            } 
            // fall through
          case 125: break;
          case 9: 
            { return TokenNameMULTIPLY;
            } 
            // fall through
          case 126: break;
          case 10: 
            { return TokenNamePLUS;
            } 
            // fall through
          case 127: break;
          case 11: 
            { return TokenNameEQUAL;
            } 
            // fall through
          case 128: break;
          case 12: 
            { return TokenNameLESS;
            } 
            // fall through
          case 129: break;
          case 13: 
            { return TokenNameGREATER;
            } 
            // fall through
          case 130: break;
          case 14: 
            { return TokenNameNOT;
            } 
            // fall through
          case 131: break;
          case 15: 
            { return TokenNameAND;
            } 
            // fall through
          case 132: break;
          case 16: 
            { return TokenNameOR;
            } 
            // fall through
          case 133: break;
          case 17: 
            { return TokenNameXOR;
            } 
            // fall through
          case 134: break;
          case 18: 
            { return TokenNameREMAINDER;
            } 
            // fall through
          case 135: break;
          case 19: 
            { return TokenNameTWIDDLE;
            } 
            // fall through
          case 136: break;
          case 20: 
            { return TokenNameLPAREN;
            } 
            // fall through
          case 137: break;
          case 21: 
            { return TokenNameRPAREN;
            } 
            // fall through
          case 138: break;
          case 22: 
            { return TokenNameLBRACE;
            } 
            // fall through
          case 139: break;
          case 23: 
            { return TokenNameRBRACE;
            } 
            // fall through
          case 140: break;
          case 24: 
            { return TokenNameLBRACKET;
            } 
            // fall through
          case 141: break;
          case 25: 
            { return TokenNameRBRACKET;
            } 
            // fall through
          case 142: break;
          case 26: 
            { return TokenNameSEMICOLON;
            } 
            // fall through
          case 143: break;
          case 27: 
            { return TokenNameQUESTION;
            } 
            // fall through
          case 144: break;
          case 28: 
            { return TokenNameCOLON;
            } 
            // fall through
          case 145: break;
          case 29: 
            { return TokenNameCOMMA;
            } 
            // fall through
          case 146: break;
          case 30: 
            { return TokenNameAT;
            } 
            // fall through
          case 147: break;
          case 31: 
            { return TokenNameStringLiteral;
            } 
            // fall through
          case 148: break;
          case 32: 
            { yybegin(YYINITIAL);return TokenNameERROR;
            } 
            // fall through
          case 149: break;
          case 33: 
            { yybegin(YYINITIAL);return TokenNameStringLiteral;
            } 
            // fall through
          case 150: break;
          case 34: 
            { 
            } 
            // fall through
          case 151: break;
          case 35: 
            { return TokenNameDoubleLiteral;
            } 
            // fall through
          case 152: break;
          case 36: 
            { return TokenNameFloatingPointLiteral;
            } 
            // fall through
          case 153: break;
          case 37: 
            { return TokenNameLongLiteral;
            } 
            // fall through
          case 154: break;
          case 38: 
            { return TokenNameMINUS_MINUS;
            } 
            // fall through
          case 155: break;
          case 39: 
            { return TokenNameMINUS_EQUAL;
            } 
            // fall through
          case 156: break;
          case 40: 
            { return TokenNameARROW;
            } 
            // fall through
          case 157: break;
          case 41: 
            { return TokenNameif;
            } 
            // fall through
          case 158: break;
          case 42: 
            { return TokenNamedo;
            } 
            // fall through
          case 159: break;
          case 43: 
            { return TokenNameCOMMENT_LINE;
            } 
            // fall through
          case 160: break;
          case 44: 
            { yybegin(BLOCK_COMMENT);
            } 
            // fall through
          case 161: break;
          case 45: 
            { return TokenNameDIVIDE_EQUAL;
            } 
            // fall through
          case 162: break;
          case 46: 
            { return TokenNameMULTIPLY_EQUAL;
            } 
            // fall through
          case 163: break;
          case 47: 
            { return TokenNamePLUS_PLUS;
            } 
            // fall through
          case 164: break;
          case 48: 
            { return TokenNamePLUS_EQUAL;
            } 
            // fall through
          case 165: break;
          case 49: 
            { return TokenNameEQUAL_EQUAL;
            } 
            // fall through
          case 166: break;
          case 50: 
            { return TokenNameLESS_EQUAL;
            } 
            // fall through
          case 167: break;
          case 51: 
            { return TokenNameLEFT_SHIFT;
            } 
            // fall through
          case 168: break;
          case 52: 
            { return TokenNameGREATER_EQUAL;
            } 
            // fall through
          case 169: break;
          case 53: 
            { return TokenNameNOT_EQUAL;
            } 
            // fall through
          case 170: break;
          case 54: 
            { return TokenNameAND_EQUAL;
            } 
            // fall through
          case 171: break;
          case 55: 
            { return TokenNameAND_AND;
            } 
            // fall through
          case 172: break;
          case 56: 
            { return TokenNameOR_EQUAL;
            } 
            // fall through
          case 173: break;
          case 57: 
            { return TokenNameOR_OR;
            } 
            // fall through
          case 174: break;
          case 58: 
            { return TokenNameXOR_EQUAL;
            } 
            // fall through
          case 175: break;
          case 59: 
            { return TokenNameREMAINDER_EQUAL;
            } 
            // fall through
          case 176: break;
          case 60: 
            { return TokenNameCOLON_COLON;
            } 
            // fall through
          case 177: break;
          case 61: 
            { yybegin(YYINITIAL);return TokenNameCOMMENT_BLOCK;
            } 
            // fall through
          case 178: break;
          case 62: 
            { return TokenNameELLIPSIS;
            } 
            // fall through
          case 179: break;
          case 63: 
            { return TokenNamenew;
            } 
            // fall through
          case 180: break;
          case 64: 
            { return TokenNamefor;
            } 
            // fall through
          case 181: break;
          case 65: 
            { return TokenNameCharacterLiteral;
            } 
            // fall through
          case 182: break;
          case 66: 
            { return TokenNametry;
            } 
            // fall through
          case 183: break;
          case 67: 
            { return TokenNameint;
            } 
            // fall through
          case 184: break;
          case 68: 
            { return TokenNameLEFT_SHIFT_EQUAL;
            } 
            // fall through
          case 185: break;
          case 69: 
            { return TokenNameRIGHT_SHIFT_EQUAL;
            } 
            // fall through
          case 186: break;
          case 70: 
            { return TokenNamenull;
            } 
            // fall through
          case 187: break;
          case 71: 
            { return TokenNamebyte;
            } 
            // fall through
          case 188: break;
          case 72: 
            { return TokenNametrue;
            } 
            // fall through
          case 189: break;
          case 73: 
            { return TokenNamethis;
            } 
            // fall through
          case 190: break;
          case 74: 
            { return TokenNamecase;
            } 
            // fall through
          case 191: break;
          case 75: 
            { return TokenNamechar;
            } 
            // fall through
          case 192: break;
          case 76: 
            { return TokenNameenum;
            } 
            // fall through
          case 193: break;
          case 77: 
            { return TokenNameelse;
            } 
            // fall through
          case 194: break;
          case 78: 
            { return TokenNamelong;
            } 
            // fall through
          case 195: break;
          case 79: 
            { return TokenNamegoto;
            } 
            // fall through
          case 196: break;
          case 80: 
            { return TokenNamevoid;
            } 
            // fall through
          case 197: break;
          case 81: 
            { return TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL;
            } 
            // fall through
          case 198: break;
          case 82: 
            { return TokenNamebreak;
            } 
            // fall through
          case 199: break;
          case 83: 
            { return TokenNamefalse;
            } 
            // fall through
          case 200: break;
          case 84: 
            { return TokenNamefloat;
            } 
            // fall through
          case 201: break;
          case 85: 
            { return TokenNamefinal;
            } 
            // fall through
          case 202: break;
          case 86: 
            { return TokenNamesuper;
            } 
            // fall through
          case 203: break;
          case 87: 
            { return TokenNameshort;
            } 
            // fall through
          case 204: break;
          case 88: 
            { return TokenNamethrow;
            } 
            // fall through
          case 205: break;
          case 89: 
            { return TokenNamecatch;
            } 
            // fall through
          case 206: break;
          case 90: 
            { return TokenNameconst;
            } 
            // fall through
          case 207: break;
          case 91: 
            { return TokenNameclass;
            } 
            // fall through
          case 208: break;
          case 92: 
            { return TokenNamewhile;
            } 
            // fall through
          case 209: break;
          case 93: 
            { return TokenNamenative;
            } 
            // fall through
          case 210: break;
          case 94: 
            { return TokenNameassert;
            } 
            // fall through
          case 211: break;
          case 95: 
            { return TokenNamestatic;
            } 
            // fall through
          case 212: break;
          case 96: 
            { return TokenNameswitch;
            } 
            // fall through
          case 213: break;
          case 97: 
            { return TokenNamethrows;
            } 
            // fall through
          case 214: break;
          case 98: 
            { return TokenNamereturn;
            } 
            // fall through
          case 215: break;
          case 99: 
            { return TokenNameimport;
            } 
            // fall through
          case 216: break;
          case 100: 
            { return TokenNamedouble;
            } 
            // fall through
          case 217: break;
          case 101: 
            { return TokenNamepublic;
            } 
            // fall through
          case 218: break;
          case 102: 
            { return TokenNameboolean;
            } 
            // fall through
          case 219: break;
          case 103: 
            { return TokenNamefinally;
            } 
            // fall through
          case 220: break;
          case 104: 
            { return TokenNameextends;
            } 
            // fall through
          case 221: break;
          case 105: 
            { return TokenNamedefault;
            } 
            // fall through
          case 222: break;
          case 106: 
            { return TokenNamepackage;
            } 
            // fall through
          case 223: break;
          case 107: 
            { return TokenNameprivate;
            } 
            // fall through
          case 224: break;
          case 108: 
            { return TokenNameabstract;
            } 
            // fall through
          case 225: break;
          case 109: 
            { return TokenNamestrictfp;
            } 
            // fall through
          case 226: break;
          case 110: 
            { return TokenNamecontinue;
            } 
            // fall through
          case 227: break;
          case 111: 
            { return TokenNamevolatile;
            } 
            // fall through
          case 228: break;
          case 112: 
            { return TokenNametransient;
            } 
            // fall through
          case 229: break;
          case 113: 
            { return TokenNameinterface;
            } 
            // fall through
          case 230: break;
          case 114: 
            { return TokenNameprotected;
            } 
            // fall through
          case 231: break;
          case 115: 
            { return TokenNameinstanceof;
            } 
            // fall through
          case 232: break;
          case 116: 
            { return TokenNameimplements;
            } 
            // fall through
          case 233: break;
          case 117: 
            { return TokenNamesynchronized;
            } 
            // fall through
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
